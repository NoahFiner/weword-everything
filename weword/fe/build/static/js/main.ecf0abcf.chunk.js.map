{"version":3,"sources":["components/Logo/index.js","components/Footer/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Logo","className","style","width","this","props","size","height","fontSize","React","Component","Footer","state","word","handleChange","bind","handleSubmit","event","setState","target","value","preventDefault","console","log","socket","emit","onSubmit","type","onChange","App","words","endpoint","process","socketIOClient","on","map","idx","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAceA,G,6LATP,OACI,yBAAKC,UAAU,WAAWC,MAAO,CAACC,MAAOC,KAAKC,MAAMC,KAAO,KAAMC,OAAQH,KAAKC,MAAMC,KAAO,OACvF,uBAAGL,UAAU,cAAcC,MAAO,CAACM,SAAUJ,KAAKC,MAAMC,KAAK,IAAM,OAAnE,MACA,uBAAGL,UAAU,cAAcC,MAAO,CAACM,SAAUJ,KAAKC,MAAMC,KAAK,IAAM,OAAnE,a,GALGG,IAAMC,Y,OCiCVC,G,kBAhCb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CAACC,KAAM,IAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXb,KAAKc,SAAS,CAACL,KAAMI,EAAME,OAAOC,U,mCAGvBH,GACXA,EAAMI,iBACNC,QAAQC,IAAI,mBACZnB,KAAKC,MAAMmB,OAAOC,KAAK,UAAWrB,KAAKQ,MAAMC,MAC7CT,KAAKc,SAAS,CAACL,KAAM,O,+BAIrB,OACE,yBAAKZ,UAAU,UACb,0BAAMyB,SAAUtB,KAAKY,cACnB,2CACA,2BAAOW,KAAK,OAAOC,SAAUxB,KAAKU,aAAcM,MAAOhB,KAAKQ,MAAMC,KAAMZ,UAAU,mBAClF,2BAAO0B,KAAK,SAASP,MAAM,SAASnB,UAAU,iB,GA1BnCS,cCgDNmB,E,YA5Cb,aAAe,IAAD,8BACZ,+CACKjB,MAAQ,CACXkB,MAAO,GAEPC,SAAkD,oCAElDP,OAAQ,MAEVF,QAAQC,IAAIS,cATA,E,iFAaO,IAAD,OACXD,EAAY3B,KAAKQ,MAAjBmB,SACDP,EAASS,IAAeF,GAC9B3B,KAAKc,SAAS,CAACM,WACfA,EAAOU,GAAG,aAAa,SAAAJ,GAAK,OAAI,EAAKZ,SAAS,CAACY,e,+BAGvC,IACDA,EAAS1B,KAAKQ,MAAdkB,MAEP,OADAR,QAAQC,IAAIO,GAEV,yBAAK7B,UAAU,oBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAMK,KAAK,OACX,0CACA,yBAAKL,UAAU,aAEjB,yBAAKA,UAAU,WACZ6B,EAAMK,KAAI,SAACf,EAAOgB,GACjB,OAAO,uBAAGC,IAAKD,EAAKnC,UAAU,QAAQmB,MAExC,yBAAKnB,UAAU,gBAGnB,kBAAC,EAAD,CAAQuB,OAAQpB,KAAKQ,MAAMY,c,GAvCjBd,aCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ecf0abcf.chunk.js","sourcesContent":["import React from 'react';\nimport './Logo.scss';\n\nclass Logo extends React.Component {\n    render() {\n        return (\n            <div className=\"logo-box\" style={{width: this.props.size + 'px', height: this.props.size + 'px'}}>\n                <p className=\"logo-line-1\" style={{fontSize: this.props.size/3.5 + 'px'}}>We</p>\n                <p className=\"logo-line-2\" style={{fontSize: this.props.size/3.5 + 'px'}}>Word</p>\n            </div>\n        )\n    }\n}\n\nexport default Logo;","import React, {Component} from 'react';\nimport './Footer.scss';\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {word: ''}\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({word: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log('handling submit');\n    this.props.socket.emit(\"addWord\", this.state.word);\n    this.setState({word: ''});\n  }\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <form onSubmit={this.handleSubmit}>\n          <h1>Add a word:</h1>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.word} className=\"add-word-input\"></input>\n          <input type=\"submit\" value=\"submit\" className=\"button\"></input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './App.scss';\nimport Logo from '../Logo';\nimport Footer from '../Footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      words: [],\n      // TODO THIS IS HELLA INSECURE\n      endpoint: process.env.NODE_ENV === \"production\" ? \"https://weword-app.herokuapp.com/\" : \"http://127.0.0.1:4001\",\n      // endpoint: \"https://weword-app.herokuapp.com/\",\n      socket: null,\n    }\n    console.log(process.env.NODE_ENV);\n  }\n\n\n  componentDidMount() {\n    const {endpoint} = this.state;\n    const socket = socketIOClient(endpoint);\n    this.setState({socket})\n    socket.on(\"sendWords\", words => this.setState({words}));\n  }\n\n  render() {\n    const {words} = this.state;\n    console.log(words);\n    return (\n      <div className=\"everything-outer\">\n        <div className=\"content-outer\">\n          <div className=\"left-navbar\">\n            <Logo size='80' />\n            <h1>Book title</h1>\n            <div className=\"divider\"></div>\n          </div>\n          <div className=\"content\">\n            {words.map((value, idx) => {\n              return <p key={idx} className=\"word\">{value}</p>\n            })}\n            <div className=\"next-word\"></div>\n          </div>\n        </div>\n        <Footer socket={this.state.socket} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}